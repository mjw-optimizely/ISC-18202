var express = require("express");
const axios = require("axios");
var router = express.Router();
var secretKey = "";
const baseUrl = "https://api.stripe.com";

router.get("/", function (req, res, next) {
    res.render("index", { title: "Stripe" });
});

function step1_token(pan, exp_month, exp_year, cvv) {
    return new Promise((resolve, reject) => {
        const params = new URLSearchParams();
        params.append("card[number]", pan);
        params.append("card[exp_month]", exp_month);
        params.append("card[exp_year]", exp_year);
        params.append("card[cvc]", cvv);

        axios
            .post(`${baseUrl}/v1/tokens`, params, {
                headers: {
                    Authorization: `Bearer ${secretKey}`,
                },
            })
            .then(response => {
                resolve(response.data.id);
            })
            .catch(error => {
                reject(error);
            });
    });
}

function step2_customer() {
    return new Promise((resolve, reject) => {
        const params = new URLSearchParams();
        params.append("name", "Herbert Birdsfoot");

        axios
            .post(`${baseUrl}/v1/customers`, params, {
                headers: {
                    Authorization: `Bearer ${secretKey}`,
                },
            })
            .then(response => {
                resolve(response.data.id);
            })
            .catch(error => {
                reject(error);
            });
    });
}

function step3_card(token, customerId) {
    return new Promise((resolve, reject) => {
        const params = new URLSearchParams();
        params.append("source", token);

        axios
            .post(`${baseUrl}/v1/customers/${customerId}/sources`, params, {
                headers: {
                    Authorization: `Bearer ${secretKey}`,
                },
            })
            .then(response => {
                resolve(response.data.id);
            })
            .catch(error => {
                reject(error);
            });
    });
}

function step4_charge(cardId, customerId, amount) {
    var currentdate = new Date();
    var datetime =
        "Generated by POC at " +
        currentdate.getDate() +
        "/" +
        (currentdate.getMonth() + 1) +
        "/" +
        currentdate.getFullYear() +
        " @ " +
        currentdate.getHours() +
        ":" +
        currentdate.getMinutes() +
        ":" +
        currentdate.getSeconds();

    return new Promise((resolve, reject) => {
        const params = new URLSearchParams();
        params.append("source", cardId);
        params.append("customer", customerId);
        params.append("amount", amount);
        params.append("currency", "usd");
        params.append("description", datetime);

        axios
            .post(`${baseUrl}/v1/charges`, params, {
                headers: {
                    Authorization: `Bearer ${secretKey}`,
                },
            })
            .then(response => {
                console.log(`Full charge response: ${JSON.stringify(response.data)}`); //
                resolve(response.data.outcome.type);
            })
            .catch(error => {
                reject(error);
            });
    });
}

router.post("/authenticated", async function (req, res, next) {
    secretKey = req.body.skey;

    try {
        const token = await step1_token(req.body.pan, req.body.expm, req.body.expy, req.body.cvv);
        const customerId = await step2_customer();
        const cardId = await step3_card(token, customerId);
        const outcome = await step4_charge(cardId, customerId, req.body.amount);
        res.render("result", { status: "Good", data: `${outcome} for ${req.body.amount}` });
    } catch (error) {
        res.render("error", { message: JSON.stringify(error) });
    }
});

module.exports = router;
